version: 2.1
jobs:

  build:
    docker:
      - image: openjdk:11
      - image: mysql
        environment:
          MYSQL_ROOT_PASSWORD: demopassword
          MYSQL_USER: demouser
          MYSQL_PASSWORD: demopassword
          MYSQL_DATABASE: pos
    steps:
      - checkout
      - run:
          command: DB_HOST=127.0.0.1 DB_PASSWORD=demopassword DB_USER=demouser DB_NAME=pos ./gradlew build
      - persist_to_workspace:
          root: .
          paths:
            - .

  tests:
    docker:
      - image: openjdk:11-jre-slim
      - image: mysql
        environment:
          MYSQL_ROOT_PASSWORD: demopassword
          MYSQL_USER: demouser
          MYSQL_PASSWORD: demopassword
          MYSQL_DATABASE: pos
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          command: DB_HOST=127.0.0.1 DB_PASSWORD=demopassword DB_USER=demouser DB_NAME=pos ./gradlew test
      - persist_to_workspace:
          root: .
          paths:
            - .
  build_and_push:
    machine:
      image: ubuntu-2204:2022.04.2
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          command: |
            echo "$MY_CREDS_FILE" | base64 -d > credentials.json 
            gcloud auth activate-service-account --key-file=credentials.json
            gcloud auth configure-docker -q
            docker build -t "asia.gcr.io/dummy-project-365407/pos" .
            docker push "asia.gcr.io/dummy-project-365407/pos"
      - persist_to_workspace:
          root: .
          paths:
            - .

  deploy:
    machine:
      image: ubuntu-2204:2022.04.2
    steps:
      - checkout
      - run:
          command: |
            echo "$MY_GCE_CREDS_FILE" | base64 -d > credentials.json
            gcloud auth activate-service-account --key-file=credentials.json
            gcloud compute instance-groups managed rolling-action replace --replacement-method=substitute --project=dummy-project-365407 --zone=us-west2-a pos-group
      - persist_to_workspace:
          root: .
          paths:
            - .


  talisman-scan:
    machine:
      image: ubuntu-2204:2022.04.2
    steps:
      # Pulls the code from git repo
      - checkout
      # Installs Talisman
      - run:
          name: Install Talisman
          command: mkdir -p ~/.talisman &&
            cd ~/.talisman &&
            curl -L -O https://github.com/thoughtworks/talisman/releases/download/v1.28.0/talisman_linux_386 &&
            chmod +x talisman_linux_386

      # Installs Talisman HTML Report Generator
      - run:
          name: Install HTML Report Generator for Talisman
          command:
            curl https://github.com/jaydeepc/talisman-html-report/archive/v1.3.zip -o ~/.talisman/talisman_html_report.zip -J -L &&
            cd ~/.talisman && unzip talisman_html_report.zip -d . &&
            mv talisman-html-report-1.3 talisman_html_report &&
            rm talisman_html_report.zip

      # Run Talisman
      - run:
          name: Run Talisman
          # || true to ensure that the following steps can carry on irrespective of the success/failure of this step
          command: 
            ~/.talisman/talisman_linux_386 --scanWithHtml
            
      - store_artifacts:
          path: ~/.talisman/talisman_html_report

  sonar_scan:
    machine:
      image: ubuntu-2204:2022.04.2
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: create gcp sonarqube server
          command: |
            echo "$NETWORK_CREDS_FILE" | base64 -d > network_creds.json
            gcloud auth activate-service-account --key-file=network_creds.json
            gcloud compute networks create --project=dummy-project-365407 sonar-network
            echo "$MY_GCE_CREDS_FILE" | base64 -d > credentials.json
            gcloud auth activate-service-account --key-file=credentials.json
            gcloud compute instances create sonarpos \
              --project=dummy-project-365407 --machine-type=e2-medium --image-project=ubuntu-os-cloud --image-family=ubuntu-2004-lts --tags=http-server\
             --zone=us-west4-b --network=sonar-network --metadata=startup-script='#! /bin/bash
            sudo apt update
            sudo apt install --yes apt-transport-https ca-certificates curl gnupg2 software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt update
            sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y
            sudo docker run -d --name sonarqube -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true -p 9000:9000 sonarqube:latest'
            gcloud compute --project=dummy-project-365407 firewall-rules create default-allow-sonar-http \
            --direction=INGRESS --priority=1000 --network=default --action=ALLOW \
            --rules=tcp:9000 --source-ranges=0.0.0.0/0 --network=sonar-network --target-tags=http-server
            sleep 200
      - run:
          name: run sonarscan
          command: |
            IP=$(gcloud compute instances list --filter="sonarpos" --project=dummy-project-365407 --format "get(networkInterfaces[0].accessConfigs[0].natIP)")
            echo $IP
            token=$(curl -X POST -H "Content-Type: application/x-www-form-urlencoded" -d "name=token" -d "type=GLOBAL_ANALYSIS_TOKEN" -u admin:admin http://${IP}:9000/api/user_tokens/generate | awk -F ":" '{print $4}' | awk -F "," '{print $1}'| awk -F '"' '{print $2}')
            echo $token
            ./gradlew sonar -Dsonar.host.url=http://${IP}:9000 -Dsonar.language=java -Dsonar.verbose=true -Dsonar.login=${token} -Dsonar.projectKey=possonar --stacktrace
      - run:
          name: delete gcp sonarqube server
          command: |
            gcloud compute instances delete --project=dummy-project-365407 --zone=us-west4-b sonarpos --quiet
            gcloud compute firewall-rules delete --project=dummy-project-365407 default-allow-sonar-http --quiet
            echo "$NETWORK_CREDS_FILE" | base64 -d > network_creds.json
            gcloud auth activate-service-account --key-file=network_creds.json
            gcloud compute networks delete --project=dummy-project-365407 sonar-network --quiet
      - persist_to_workspace:
          root: .
          paths:
            - .
workflows:
  version: 2
  build-test-deploy:
    jobs:
      - sonar_scan
#      - talisman-scan
#      - build:
#          requires:
#            - talisman-scan
#      - tests:
#          requires:
#            - build
#      - build_and_push:
#          requires:
#            - tests
#      - deploy:
#          requires:
#            - build_and_push